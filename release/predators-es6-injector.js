/*!
 * @project $M - Predators Module Management System
 * @requires jQuery (window.jQuery)
 * @version 0.0.1
 * @date Wed Dec 23 2015 17:44:52 GMT+0100 (W. Europe Standard Time)
**/
!function(window,jQuery){"use strict";function isString(input){return"string"===jQuery.type(input)}function isFunction(input){return jQuery.isFunction(input)}var reject=function(reason){return jQuery.Deferred().reject(reason)},resolve=jQuery.when,Component=function(){function Component(id,definition){this.id=id,this.definition=definition}return Component}(),Module=function(){function Module(id,factory){this.id=id,this.factory=factory,this.scope={}}return Module.prototype.toString=function(){return this.id},Module.isModule=function(value){return value instanceof Module},Module}(),$M=function(){function $M(){this._YTOS_READY_EVENT_="yTosReady",this._INJECTOR_MODULES_CONTAINER_={},this._INJECTOR_COMPONENTS_CONTAINER_={}}return $M.prototype.getModule=function(id){var _this=this;return isString(id)?this.hasModule(id).then(function(){return _this._INJECTOR_MODULES_CONTAINER_[id]}).fail(function(){return reject("$M unknown module "+id)}):reject("$M.getModule, first param must be a string")},$M.prototype.inspectModule=function(module){var promise=reject("$M.inspectModule unknown "+module+", param must be a string or a Module");return isString(module)&&(promise=this.getModule(module.toString())),Module.isModule(module)&&(promise=resolve(module)),promise.then(function(module){return module.scope})},$M.prototype.setModule=function(id,factory){if(!isString(id))throw Error("$M.setModule, first param must be a string");if(!isFunction(id))throw Error("$M.setModule, second param must be a function");if(this.hasModuleSync(id))throw Error("$M.setModule "+id+" alredy exists");return this._INJECTOR_MODULES_CONTAINER_[id]=new Module(id,factory),this},$M.prototype.hasModuleSync=function(id){return this._INJECTOR_MODULES_CONTAINER_.hasOwnProperty(id)},$M.prototype.hasModule=function(id){return this.hasModuleSync(id)?resolve():reject()},$M.prototype.runModules=function(modules){for(var promises=[],i=0;i<modules.length;i++){var module=modules[i];promises.push(this.runModule(module))}return resolve.apply(jQuery,modules)},$M.prototype.runModule=function(module){var promise=reject("$M.runModule unknown "+module+", param must be a string or a Module");return isString(module)&&(promise=this.getModule(module.toString())),Module.isModule(module)&&(promise=resolve(module)),promise.then(function(module){var failure,deferred=jQuery.Deferred();try{module.factory.call(module.scope,jQuery)}catch(error){failure=error}return window.setTimeout(function(){failure?deferred.reject(failure):deferred.resolve(module)},0),deferred.promise()})},$M.prototype.setComponent=function(id,definition){if(!isString(id))throw Error("$M.setComponent, first param must be a string");if(this.hasComponent(id))throw Error("$M.setComponent "+id+" alredy exists");return this._INJECTOR_COMPONENTS_CONTAINER_[id]=new Component(id,definition),this},$M.prototype.getComponent=function(id){if(!isString(id))throw Error("$M.getComponent, first param must be a string");if(!this.hasComponent(id))throw Error("$M.Component "+id+" not found");return this._INJECTOR_COMPONENTS_CONTAINER_[id].definition},$M.prototype.hasComponent=function(id){return this._INJECTOR_COMPONENTS_CONTAINER_.hasOwnProperty(id)},$M.prototype.yTosReady=function(module){var _this=this,deferred=jQuery.Deferred();return jQuery(document).on(this._YTOS_READY_EVENT_,function(){deferred.resolve(_this.runModule(module))}),deferred.promise()},$M}();window.$M=new $M}(window,window.jQuery);
//# sourceMappingURL=data:application/json;base64,
