/*!
 * @project $M - Predators Module Management System
 * @requires jQuery (window.jQuery)
 * @version 0.0.1
 * @date Thu Jan 14 2016 17:19:08 GMT+0100 (W. Europe Standard Time)
**/
!function(window,jQuery){"use strict";function isString(input){return"string"===jQuery.type(input)}function isFunction(input){return jQuery.isFunction(input)}var reject=function(reason){var deferred=jQuery.Deferred();return setTimeout(function(){deferred.reject(reason)},0),deferred.promise()},resolve=function(){return jQuery.when.apply(jQuery,arguments)},ModuleScope=(function(){function Component(id,definition){this.id=id,this.definition=definition}return Component}(),function(){function ModuleScope(){}return ModuleScope}()),Module=function(){function Module(id,factory){this.id=id,this.factory=factory,this.scope=new ModuleScope}return Module.prototype.toString=function(){return this.id},Module.isModule=function(value){return value instanceof Module},Module}(),$M=function(){function $M(){this._YTOS_READY_EVENT_="yTosReady",this._INJECTOR_MODULES_CONTAINER_={},this._INJECTOR_COMPONENTS_CONTAINER_={}}return $M.prototype.get=function(id){var _this=this,deferred=jQuery.Deferred();return window.setTimeout(function(){return isString(id)?_this.hasSync(id)?deferred.resolve(_this._INJECTOR_MODULES_CONTAINER_[id]):deferred.reject("$M unknown module "+id):deferred.reject("$M.get, first param must be a string")}),deferred.promise()},$M.prototype.inspect=function(module){var promise=reject("$M.inspect unknown "+module+", param must be a string or a Module");return isString(module)&&(promise=this.get((module||"").toString())),Module.isModule(module)&&(promise=resolve(module)),promise.then(function(module){return module.scope})},$M.prototype.set=function(id,factory){if(!isString(id))throw Error("$M.set, first param must be a string");if(!isFunction(factory))throw Error("$M.set, second param must be a function");if(this.hasSync(id))throw Error("$M.set "+id+" alredy exists");return this._INJECTOR_MODULES_CONTAINER_[id]=new Module(id,factory),this},$M.prototype.hasSync=function(id){return this._INJECTOR_MODULES_CONTAINER_.hasOwnProperty(id)},$M.prototype.has=function(id){return this.hasSync(id)?resolve():reject()},$M.prototype.runModules=function(modules){for(var promises=[],i=0;i<modules.length;i++){var module=modules[i];promises.push(this.runModule(module))}return resolve.apply(jQuery,promises)},$M.prototype.runModule=function(module){var promise=reject("$M.runModule unknown "+module+", param must be a string or a Module");return isString(module)&&(promise=this.get((module||"").toString())),Module.isModule(module)&&(promise=resolve(module)),promise.then(function(module){var failure,deferred=jQuery.Deferred();try{module.factory.call(module.scope,jQuery)}catch(error){failure=error}return window.setTimeout(function(){failure?deferred.reject(failure):deferred.resolve(module)},0),deferred.promise()})},$M.prototype.yTosReady=function(module){var _this=this,deferred=jQuery.Deferred();return jQuery(document).on(this._YTOS_READY_EVENT_,function(){deferred.resolve(module&&_this.runModule(module))}),deferred.promise()},$M}(),$MInjector=new $M;Object.defineProperty?Object.defineProperty(window,"$M",{"value":$MInjector,"writable":!1,"enumerable":!0,"configurable":!1}):window.$M=$MInjector}(window,window.jQuery);
//# sourceMappingURL=data:application/json;base64,
